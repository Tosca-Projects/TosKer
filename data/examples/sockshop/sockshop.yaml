tosca_definitions_version: tosca_simple_yaml_1_0

description: SockShop microservice-based  demo application

repositories:
  docker_hub: https://registry.hub.docker.com/

imports:
  # - tosker: https://di-unipi-socc.github.io/tosker-types/0.0.6/tosker.yaml
  - tosker: tosker-types.yaml

topology_template:
  inputs:
    adge-router_port:
      type: integer
      default: 80
      description: Edger router port
    front-end_branch:
      type: string
      default: master
      description: Branch of the sockershop front-end microservice
  node_templates:
    edge-router:
        type: tosker.nodes.Container
        requirements:
          - connection: front-end
        properties:
          ports:
            80: { get_input: adge-router_port }
        artifacts:
          my_image:
            file: weaveworksdemos/edge-router:latest
            type: tosker.artifacts.Image.Service
            repository: docker_hub
   front-end:
      type: tosker.nodes.Software
      requirements:
        - host: node
        - connection: catalogue
      interfaces:
        Standard:
          create:
            implementation: scripts/front-end/install.sh
            inputs:
              repo: https://github.com/microservices-demo/front-end.git
              branch: { get_input: front-end_branch }
          start:
            implementation: scripts/front-end/start.sh
          stop:
            implementation: scripts/front-end/stop.sh
          delete:
            implementation: scripts/front-end/uninstall.sh
    # front-end:
    #   type: tosker.nodes.Container
    #   requirements:
    #     - connection: catalogue
    #   artifacts:
    #     my_image:
    #       file: weaveworksdemos/front-end:latest
    #       type: tosker.artifacts.Image.Service
    #       repository: docker_hub

    catalogue:
      type: tosker.nodes.Container
      requirements:
        - connection: catalogue-db
      artifacts:
        my_image:
          file: weaveworksdemos/catalogue
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        ports:
          80: 80
    node:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: node:4.8
          type: tosker.artifacts.Image
          repository: docker_hub

    catalogue-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: weaveworksdemos/catalogue-db
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        env_variable:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: socksdb
    #
    # carts:
    #     type: tosker.nodes.Container
    #     requirements:
    #       - connection: catalogue-db
    #     artifacts:
    #       my_image:
    #         file: weaveworksdemos/carts
    #         type: tosker.artifacts.Image.Service
    #         repository: docker_hub
    #     properties:
    #       env_variable:
    #         JAVA_OPTS: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom


      # image: weaveworksdemos/carts
      # hostname: carts
      # restart: always
      # cap_drop:
      #   - all
      # cap_add:
      #   - NET_BIND_SERVICE
      # read_only: true
      # tmpfs:
      #   - /tmp:rw,noexec,nosuid
      # environment:
      #   - JAVA_OPTS=-Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
    # carts-db:
      # image: mongo
      # hostname: carts-db
      # restart: always
      # cap_drop:
      #   - all
      # cap_add:
      #   - CHOWN
      #   - SETGID
      #   - SETUID
      # read_only: true
      # tmpfs:
      #   - /tmp:rw,noexec,nosuid


    dbvolume:
      type: tosker.nodes.Volume
